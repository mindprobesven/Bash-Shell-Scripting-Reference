#!/bin/bash

# h264ftpfix - H264 DVR FTP Upload Fix
# ------------------------------------------------------------------------------------------------------
# Version 1.0
# Author: Sven Kohn
# ------------------------------------------------------------------------------------------------------
# This script automates the process of scanning the directories and video files generated by the H264 DVR
# during FTP upload for potential issues and fixes them if necessary.
#
# The H264 DVR FTP upload is buggy. At random times, it creates a duplicate of the home directory, which
# is specified in its FTP upload settings, nested inside a video date directory. At other random times,
# a video file upload does not complete and the video file ends up with a filesize of 0 bytes. In both cases,
# further FTP upload fails permanently. This script helps to resolve this issue by scanning through the video
# date directories generated by the H264 DVR. If an issue is found, this script will rename the problematic
# video date directory adding an iteration value (e.g. 2022-04-15-1). The H264 DVR will then automatically
# create a new video date directory and FTP upload resumes normally.
#
# Usage
# This script is intented to run as a cron job.
#
# Installation
# 1. Copy the h264ftpfix script to /usr/local/bin
#
# 2. Make it executable
# sudo chmod ugo+x /usr/local/bin/h264ftpfix
#
# 3. Create a /log directory inside the dropbox synced directory for the log file generated by this script
#
# 4. Set values for h264_ftp_dir_path, broken_dir_name, log_dir_path, log_filename and log_events_filename
#
# 5. Test the script by running it manually
# h264ftpfix
#
# 6. Add a user specific Cron job to run the script automatically at a set time interval
# sudo crontab -u mindprobe -e
#
# Every minute
# * * * * * /usr/local/bin/h264ftpfix
#
# Every 10 minutes
# */10 * * * * /usr/local/bin/h264ftpfix

#declare -r h264_ftp_dir_path='/home/mindprobe/Desktop/Repos/Bash-Shell-Scripting-Reference/Scripts/H264 DVR FTP Fix/cctv-usb'
declare -r h264_ftp_dir_path='/home/mindprobe/cctv-usb'
declare target_dir_name=""
declare -r broken_dir_name="cctv-usb"
#declare -r log_dir_path='/home/mindprobe/Desktop/Repos/Bash-Shell-Scripting-Reference/Scripts/H264 DVR FTP Fix/log'
declare -r log_dir_path='/home/mindprobe/dropbox/log'
declare -r log_filename="h264ftpfix.txt"
declare -r log_events_filename="h264ftpfix-events.txt"

function logger {
  if [ -d "$log_dir_path" ]
  then
    # Logs everything
    printf "%-22s%-8s%s\n" "$(date +"%d-%m-%Y %T")" "$1" "$2" >> "$log_dir_path/$log_filename"
    # Logs only EVENT and ERROR
    if [ $1 = "EVENT" -o $1 = "ERROR" ]
    then
      printf "%-22s%-8s%s\n" "$(date +"%d-%m-%Y %T")" "$1" "$2" >> "$log_dir_path/$log_events_filename"
    fi
  else
    printf "%-22s%-8s%s\n" "$(date +"%d-%m-%Y %T")" "ERROR" "log_dir_path not found! Aborting..."
    exit 1
  fi
}

function iterateDirName {
  declare -i next_iteration_value=$(($(find "$1" -type d -name "$2-*" 2> /dev/null | wc -l) + 1))
  logger "EVENT" "Iterating directory $2 to $2-$next_iteration_value"

  mv "$1/$2" "$1/$2-$next_iteration_value" &> /dev/null
  if [ $? -eq 0 ]
  then
    logger "INFO" "Directory renamed successfully. Done."
    exit 0
  else
    logger "ERROR" "Renaming directory failed! Aborting..."
    exit 1
  fi
}

# Check if the h264_ftp_dir_path exists
if [ ! -d "$h264_ftp_dir_path" ]
then
  logger "ERROR" "h264_ftp_dir_path not found! Aborting..."
  exit 1
fi

# Check if the h264_ftp_dir_path is empty
if [ ! "$(ls -A "$h264_ftp_dir_path")" ]
then
  logger "INFO" "h264_ftp_dir_path is empty. Nothing to do. Done."
  exit 0
fi

# Check if the newest directory in h264_ftp_dir_path was generated by the H264 DVR.
#
# Sort the directory contents of h264_ftp_dir_path by last access time first and list all items line by line (-tc1 flags)
# Grab the first item in the list and remove the new line break (echo -n).
# Check if the item is 10 characters long to make sure it's a directory created by the H264 DVR (e.g. 2022-05-24)
target_dir_name=$(ls -tc1 "$h264_ftp_dir_path" | echo -n $(head -n 1))
if [ $(echo -n "$target_dir_name" | wc -m) -eq 10 ]
then
  logger "INFO" "Newest directory was generated by H264 DVR. Checking for problems..."
else
  logger "INFO" "Newest directory was not generated by H264 DVR. Nothing to do. Done."
  exit 0
fi

# Check if the generated directory ($target_dir_name) contains a broken directory. If yes, then iterate.
if [ "$(find "$h264_ftp_dir_path/$target_dir_name" -type d -iname "$broken_dir_name" 2> /dev/null | head -n 1)" ]
then
  logger "EVENT" "Broken directory found!"
  iterateDirName "$h264_ftp_dir_path" "$target_dir_name"
else
  logger "INFO" "No broken directory found. Skipping this step..."
fi

# Check if the generated directory ($target_dir_name) contains files with 0 bytes
if [ ! $(find "$h264_ftp_dir_path/$target_dir_name" -type f -size 0 2> /dev/null | wc -l) -eq 0 ]
then
  logger "EVENT" "A file with 0 bytes was found!"
  iterateDirName "$h264_ftp_dir_path" "$target_dir_name"
else
  logger "INFO" "No files with 0 bytes found. All checks completed. Done."
  exit 0
fi